{"name":"Clocker","tagline":"Brooklyn managed Docker containers","body":"Clocker\r\n=======\r\n\r\nClocker contains [Brooklyn](http://brooklyn.io/) entities, locations and examples that create a [Docker](http://docker.io) cloud infrastructure.\r\n\r\n## Getting started\r\n\r\nThis project requires a Docker instance that Brooklyn will use as a target location when deploying application blueprints.\r\n\r\nYou can use Brooklyn to install Docker onto a single existing machine, or create a Docker based cloud infrastructure on your favourite cloud provider or on a private cloud using any of the jclouds supported APIs.\r\n\r\nTo install a Docker cloud infrastucture using the Clocker Brooklyn entities, there is an example blueprint at\r\n[DockerCloud](https://raw.githubusercontent.com/brooklyncentral/clocker/master/examples/src/main/java/brooklyn/clocker/example/DockerCloud.java) or [docker-cloud.yaml](https://raw.githubusercontent.com/brooklyncentral/clocker/master/examples/src/main/assembly/files/blueprints/docker-cloud.yaml).\r\n\r\n### Using the latest Clocker release\r\n\r\nYou can build a *Docker Cloud Infrastructure* running these commands:\r\n```Bash\r\n% wget --no-check-certificate --quiet \\\r\n    -O brooklyn-clocker-examples-0.4.0-dist.tar.gz https://git.io/WOhfyw\r\n% tar zxf brooklyn-clocker-examples-0.4.0-dist.tar.gz\r\n% cd brooklyn-clocker-examples-0.4.0\r\n% ./clocker.sh launch --cloud --location <location>\r\n```\r\nWhere `<location>` can be e.g. `jclouds:softlayer`, or a named location or a fixed IP e.g. `byon:(hosts=\"1.2.3.4\")`. Those simple steps will give you a running docker instance on your favourite cloud.\r\n\r\n**Important**: Please be sure that the location allows incoming connections on TCP ports *2375-2376* (the Docker daemon) and in the range *49000-49900* used by Docker to map container ports onto ports on the hosts public IP address. If you create a security group on AWS called _docker_ this will be used automatically by the application.\r\n\r\nFor more information on setting up locations, see the _Setting up Locations_ section of [Brooklyn Getting Started](http://brooklyncentral.github.io/use/guide/quickstart/index.html), and the \"Off-the-shelf Locations\" section of [Brooklyn Common Usage](http://brooklyncentral.github.io/use/guide/defining-applications/common-usage.html).\r\n\r\nOnce the `DockerCloud`  application has started, a new location named `my-docker-cloud` will be available in the Locations drop-down list when adding new applications. Simply start a new application in this location and it will use Docker containers instead of virtual machines.\r\n\r\n### Building from source\r\n\r\nBuild and run the examples as follows:\r\n\r\n```Bash\r\n% git clone https://github.com/brooklyncentral/clocker.git\r\n...\r\n% cd clocker\r\n% mvn clean install\r\n...\r\n% cd examples\r\n% mvn assembly:single\r\n...\r\n% tar zxf target/brooklyn-clocker-examples-0.5.0-SNAPSHOT-dist.tar.gz\r\n% cd brooklyn-clocker-examples-0.5.0-SNAPSHOT\r\n% ./clocker.sh launch --cloud --location <location>\r\n...\r\n```\r\n\r\n## Getting involved\r\n\r\nClocker is Apache 2.0 licensed and the intention is to contribute it to Apache Brooklyn project so please get involved and join the discussion on [Freenode](http://freenode.net/) IRC `#brooklyncentral` or the Apache Brooklyn community [mailing list](https://brooklyn.incubator.apache.org/community/).\r\n\r\n----\r\nCopyright 2014 by Cloudsoft Corporation Limited\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.","google":"UA-15947686-1","note":"Don't delete this file! It's used internally to help with page regeneration."}